import  { useEffect, useState, useCallback, useRef } from "react";
import { useNavigate } from "react-router-dom";
import ChatBan from "../../components/Home/ChatBan";
import Question from "../../components/Home/Question";

import Footer from "../../components/Home/Footer";

import Homeasmr from "../../components/Home/Homeasmr";

import Homemessage from "../../components/Home/Homemessage";
import Homedoctor from "../../components/Home/Homedoctor";
import { getAvailableGroupsAndNext } from "../../services/https/assessment";
import { logActivity } from "../../services/https/activity";
function Home() {
  const navigate = useNavigate();

  const [showPopup, setShowPopup] = useState(false);
  const [popupData, setPopupData] = useState<{
    groupId: number;
    quid: number;
  } | null>(null);
  const [_checking, setChecking] = useState(false);
  const [didFinishOnLogin, setDidFinishOnLogin] = useState(false);

  const checkOnLoginGroup = useCallback(async () => {
    // ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô uid ‡πÉ‡∏´‡πâ‡∏ä‡∏±‡∏ß‡∏£‡πå (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÉ‡∏ô MoodPopup)
    const user = JSON.parse(localStorage.getItem("user") || "{}");
    const uid = Number(user?.id || localStorage.getItem("id"));

    if (!uid) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ uid ‚Äî ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏ä‡πá‡∏Ñ onLogin popup");
      setShowPopup(false);
      setPopupData(null);
      return;
    }

    try {
      setChecking(true);

      // ‚úÖ ‡∏Ç‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° onLogin
      const groups = await getAvailableGroupsAndNext(uid, "onLogin");
      // console.log("üì¶ groups (onLogin):", groups);

      // ‡∏ñ‡πâ‡∏≤ backend ‡∏ü‡∏¥‡∏•‡πÄ‡∏ï‡∏≠‡∏£‡πå‡πÅ‡∏•‡πâ‡∏ß ‡∏à‡∏∞‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÅ‡∏ï‡πà onLogin; ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡πÑ‡∏ß‡πâ‡∏´‡∏≤‡∏≠‡∏µ‡∏Å‡∏£‡∏≠‡∏ö
      const found = groups.find((g: any) => g.available && g.next);

      if (found && found.next) {
        // ‚è≥ ‡∏¢‡∏±‡∏á ‚Äúavailable‚Äù ‡πÅ‡∏õ‡∏•‡∏ß‡πà‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥ ‚Üí ‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏™‡∏î‡∏á popup
        // console.log("üü¢ onLogin ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ó‡∏≥ ‚Üí ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ popup", found);
        setPopupData({ groupId: found.id, quid: found.next.id });
        setShowPopup(true);
      } else {
        // ‚úÖ ‡πÑ‡∏°‡πà available ‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ next) ‚Üí ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏ã‡πà‡∏≠‡∏ô popup
        // console.log("‚úÖ onLogin ‡∏ó‡∏≥‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß/‡πÑ‡∏°‡πà‡∏°‡∏µ next ‚Üí ‡∏ã‡πà‡∏≠‡∏ô popup");
        setShowPopup(false);
        setPopupData(null);
        setDidFinishOnLogin(true); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏ô‡∏µ‡πâ
      }
    } catch (e) {
      console.error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à onLogin popup ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
      // ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß‡∏Å‡πá‡∏≠‡∏¢‡πà‡∏≤‡πÉ‡∏´‡πâ‡∏Å‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ
      setShowPopup(false);
      setPopupData(null);
    } finally {
      setChecking(false);
    }
  }, []);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    checkOnLoginGroup();
  }, [checkOnLoginGroup]);

  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ã‡πâ‡∏≥‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÅ‡∏ó‡πá‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ active (‡πÄ‡∏ä‡πà‡∏ô ‡∏ó‡∏≥‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤‡∏´‡∏ô‡πâ‡∏≤ Home)
  useEffect(() => {
    const onFocus = () => checkOnLoginGroup();
    const onVisibility = () => {
      if (document.visibilityState === "visible") checkOnLoginGroup();
    };
    window.addEventListener("focus", onFocus);
    document.addEventListener("visibilitychange", onVisibility);
    return () => {
      window.removeEventListener("focus", onFocus);
      document.removeEventListener("visibilitychange", onVisibility);
    };
  }, [checkOnLoginGroup]);

  // ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏∂‡πâ‡∏ô‡∏ö‡∏ô‡∏™‡∏∏‡∏î‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÄ‡∏Ç‡πâ‡∏≤‡∏´‡∏ô‡πâ‡∏≤
  useEffect(() => {
    window.scrollTo({ top: 0, behavior: "smooth" });
  }, []);

  // üîÅ ‡∏ñ‡πâ‡∏≤‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡πÉ‡∏´‡πâ‡πÅ‡∏™‡∏î‡∏á popup ‚Üí ‡∏ô‡∏≥‡∏ó‡∏≤‡∏á‡πÑ‡∏õ route ‡πÉ‡∏´‡∏°‡πà /assessment/:groupId/:quid
  useEffect(() => {
    if (showPopup && popupData) {
      navigate(`/assessment/${popupData.groupId}/${popupData.quid}`, {
        replace: false,
      });
    }
  }, [showPopup, popupData, navigate]);
  const hasLoggedRef = useRef(false); // ref ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ log ‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡∏¢‡∏±‡∏á

  const checkIntervalGroup = useCallback(async () => {
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥ onLogin ‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô‡∏ñ‡∏∂‡∏á‡∏à‡∏∞‡πÄ‡∏ä‡πá‡∏Ñ interval
    if (!didFinishOnLogin) return;

    const user = JSON.parse(localStorage.getItem("user") || "{}");
    const uid = Number(user?.id || localStorage.getItem("id"));
    if (!uid) return;

    try {
      const groups = await getAvailableGroupsAndNext(uid, "interval");
      // console.log("‚è±Ô∏è groups (interval):", groups);

      if (Array.isArray(groups)) {
        const found = groups.find((g: any) => g?.available && g?.next);
        if (found?.id && found?.next?.id) {
          // console.log("üü¢ interval ‡∏û‡∏ö‡∏á‡∏≤‡∏ô‡πÉ‡∏´‡πâ‡∏ó‡∏≥ ‚Üí ‡πÑ‡∏õ assessment", found);
          navigate(`/assessment/${found.id}/${found.next.id}`, {
            replace: false,
          });
        }
      }
    } catch (e) {
      console.error("‚ùå ‡∏ï‡∏£‡∏ß‡∏à interval ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:", e);
    }
  }, [didFinishOnLogin, navigate]);

  // ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏ó‡∏±‡∏ô‡∏ó‡∏µ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÅ‡∏£‡∏Å ‡∏´‡∏•‡∏±‡∏á onLogin ‡∏ú‡πà‡∏≤‡∏ô‡πÅ‡∏•‡πâ‡∏ß
  useEffect(() => {
    if (didFinishOnLogin) {
      checkIntervalGroup();
    }
  }, [didFinishOnLogin, checkIntervalGroup]);

  // ‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏ü‡∏Å‡∏±‡∏™‡∏´‡∏£‡∏∑‡∏≠‡∏Å‡∏•‡∏±‡∏ö‡∏°‡∏≤ visible ‡πÉ‡∏´‡πâ‡πÄ‡∏ä‡πá‡∏Ñ interval ‡∏î‡πâ‡∏ß‡∏¢ (‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡∏•‡∏±‡∏á onLogin ‡∏ú‡πà‡∏≤‡∏ô)
  useEffect(() => {
    const onFocus = () => {
      checkOnLoginGroup(); // ‡πÄ‡∏î‡∏¥‡∏°
      checkIntervalGroup(); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°
    };
    const onVisibility = () => {
      if (document.visibilityState === "visible") {
        checkOnLoginGroup(); // ‡πÄ‡∏î‡∏¥‡∏°
        checkIntervalGroup(); // ‚¨ÖÔ∏è ‡πÄ‡∏û‡∏¥‡πà‡∏°
      }
    };
    window.addEventListener("focus", onFocus);
    document.addEventListener("visibilitychange", onVisibility);
    return () => {
      window.removeEventListener("focus", onFocus);
      document.removeEventListener("visibilitychange", onVisibility);
    };
  }, [checkOnLoginGroup, checkIntervalGroup]);

  useEffect(() => {
    if (hasLoggedRef.current) return; // ‡∏ñ‡πâ‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°
    hasLoggedRef.current = true; // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÅ‡∏•‡πâ‡∏ß

    const uid = Number(localStorage.getItem("id"));
    if (!uid) return;

    logActivity({
      uid,
      action: "visit_page_first",
      page: "/home",
    });
  }, []);

  return (
    <div className="bg-[#F4FFFF] relative dark:bg-background-dark ">
      <ChatBan />
      <Question />
  
      <Homeasmr />
  
      <Homemessage />
      <Homedoctor />

      <Footer />
    </div>
  );
}

export default Home;
