import React, { useEffect, useState } from "react";
import {
  ResponsiveContainer,
  PieChart,
  Pie,
  Cell,
  Tooltip,
  Legend,
} from "recharts";
import { EllipsisOutlined } from "@ant-design/icons";
import { getSoundFourType, DailySoundUsage } from "../../../../services/https/dashboardcontents";
import dayjs from "dayjs";
import "dayjs/locale/th";

interface MusicData {
  category: string; // ‡∏™‡∏°‡∏≤‡∏ò‡∏¥, ‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå, ‡∏ù‡∏∂‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à, ASMR
  plays: number;
}

interface MusicCardProps {
  title?: string;
  className?: string;
  onViewMore?: () => void;
}

// üé® ‡∏™‡∏µ‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•‡∏ï‡∏≤‡∏° category
const CATEGORY_COLORS: Record<string, string> = {
  "‡∏™‡∏°‡∏≤‡∏ò‡∏¥": "#7bed7f",    // ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏°‡∏¥‡πâ‡∏ô‡∏ï‡πå
  "‡∏™‡∏ß‡∏î‡∏°‡∏ô‡∏ï‡πå": "#AFD5F0",  // ‡∏ü‡πâ‡∏≤‡∏≠‡πà‡∏≠‡∏ô
  "‡∏ù‡∏∂‡∏Å‡∏´‡∏≤‡∏¢‡πÉ‡∏à": "#ffbc59", // ‡∏™‡πâ‡∏°‡∏û‡∏≤‡∏™‡πÄ‡∏ó‡∏•
  "ASMR": "#ee8fff",      // ‡∏°‡πà‡∏ß‡∏á‡∏ä‡∏°‡∏û‡∏π
};

const MusicCard: React.FC<MusicCardProps> = ({
  title = "‡∏Ñ‡∏≠‡∏ô‡πÄ‡∏ó‡∏ô‡∏ï‡πå‡πÄ‡∏™‡∏µ‡∏¢‡∏á (‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ)",
  className = "bg-white",
  onViewMore,
}) => {
  const [data, setData] = useState<MusicData[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
  const fetchMusicData = async () => {
    setLoading(true);
    try {
      const response: DailySoundUsage[] = await getSoundFourType();
      //console.log("Raw data from API (four-type daily):", response);

      const today = dayjs();
      const todayData = response.filter(
        (item) =>
          item.year === today.year() &&
          item.month === today.month() + 1 && // dayjs ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏à‡∏≤‡∏Å 0
          item.day === today.date()
      );

      // ‡∏£‡∏ß‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏•‡πà‡∏ô‡∏ï‡∏≤‡∏°‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó
      const formattedData = todayData.reduce((acc: MusicData[], item) => {
        const categoryName = item.category.toLowerCase() === "asmr" ? "ASMR" : item.category;
        const existing = acc.find((d) => d.category === categoryName);
        if (existing) {
          existing.plays += item.play_count;
        } else {
          acc.push({ category: categoryName, plays: item.play_count });
        }
        return acc;
      }, []);

      setData(formattedData);
    } catch (err) {
      setError("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ");
      console.error(err);
    } finally {
      setLoading(false);
    }
  };

  fetchMusicData();
}, []);


  const totalPlays = data.reduce((sum, item) => sum + item.plays, 0);

  return (
    <div className={`rounded-2xl p-4 shadow-md ${className} relative`}>
      <h2 className="font-semibold mb-2 flex items-center justify-between">
        {title}
        {onViewMore && (
          <button
            onClick={onViewMore}
            className="p-2 rounded-full bg-white/50 hover:bg-blue-300 transition flex justify-center items-center"
            title="‡∏î‡∏π‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
          >
            <EllipsisOutlined className="text-gray-600 text-lg" />
          </button>
        )}
      </h2>

      {loading ? (
        <p>‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•...</p>
      ) : error ? (
        <p className="text-red-500">{error}</p>
      ) : data.length === 0 ? (
        <p>‡∏ß‡∏±‡∏ô‡∏ô‡∏µ‡πâ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•</p>
      ) : (
        <>
          <div className="h-64">
            <ResponsiveContainer width="100%" height="100%">
              <PieChart>
                <Pie
                  data={data}
                  dataKey="plays"
                  nameKey="category"
                  cx="50%"
                  cy="50%"
                  outerRadius={100}
                  label={false}
                  labelLine={false}
                >
                  {data.map((entry, index) => (
                    <Cell
                      key={`cell-${index}`}
                      fill={CATEGORY_COLORS[entry.category] || "#cccccc"}
                    />
                  ))}
                </Pie>
                <Tooltip formatter={(value: number) => [`${value} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á`, "‡πÄ‡∏•‡πà‡∏ô"]} />
                <Legend />
              </PieChart>
            </ResponsiveContainer>
          </div>
          <p className="text-lg font-bold mt-2 text-center text-gray-700">
            ‡∏£‡∏ß‡∏° {totalPlays} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á
          </p>
        </>
      )}
    </div>
  );
};

export default MusicCard;
