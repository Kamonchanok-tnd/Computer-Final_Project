import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { RequestPasswordReset } from "../../../services/https/login";
import { validateApi, resetPassword } from "../../../services/https/resetpassword";
import { message } from "antd";
import Stepper from "./stepper";
const ForgotPasswordStepPage: React.FC = () => {
  const [step, setStep] = useState(0);
  const [email, setEmail] = useState("");
  const [uuid, setUuid] = useState(Array(6).fill(""));
  const [timer, setTimer] = useState(5 * 60);
  const [loading, setLoading] = useState(false);
  const [newPassword, setNewPassword] = useState("");
  const [confirmPassword, setConfirmPassword] = useState("");

  const navigate = useNavigate();

  useEffect(() => {
  if (step === 1 && timer > 0) {
    const interval = setInterval(() => setTimer((prev) => prev - 1), 1000);
    return () => clearInterval(interval);
  } else if (step === 1 && timer === 0) {
    message.error("р╣Ар╕зр╕ер╕▓р╕лр╕бр╕Ф р╕Бр╕гр╕╕р╕Ур╕▓р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Гр╕лр╕бр╣И");
  }
}, [step, timer]);


  const formatTimer = () => {
    const m = Math.floor(timer / 60);
    const s = timer % 60;
    return `${m}:${s < 10 ? "0" : ""}${s}`;
  };

  // ---- Logic ----
const handleEmailSubmit = async () => {
  if (!email) return message.warning("р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕нр╕╡р╣Ар╕бр╕ер╕Вр╕нр╕Зр╕Др╕╕р╕У");
  setLoading(true);
  try {
    const res = await RequestPasswordReset(email);
    if (res.status === 200) {
      message.success("р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Др╕Ыр╕Чр╕╡р╣Ир╕нр╕╡р╣Ар╕бр╕ер╕Вр╕нр╕Зр╕Др╕╕р╕Ур╣Бр╕ер╣Йр╕з");
      setStep(1);
      setTimer(5 * 60);
    } else {
      message.error(res.data.error || "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Др╕Фр╣Й");
    }
  } finally {
    setLoading(false);
  }
};

  const handleUuidSubmit = async () => {
  const uuidString = uuid.join("");
  if (uuidString.length < 6) return message.warning("р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕кр╣Гр╕лр╣Йр╕Др╕гр╕Ъ 6 р╕лр╕ер╕▒р╕Б");

  setLoading(true);
  try {
    const res = await validateApi({ token: uuidString });
    if (res.status === 200) {
      localStorage.setItem("userId", res.data.id);
      localStorage.setItem("jwt", res.data.jwt);
      message.success("р╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З р╕Бр╕гр╕╕р╕Ур╕▓р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И");
      setStep(2);
    } else {
      message.error(res.data.error || "р╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Др╕бр╣Ир╕Цр╕╣р╕Бр╕Хр╣Йр╕нр╕З");
    }
  } finally {
    setLoading(false);
  }
};

const handlePasswordReset = async () => {
  if (newPassword !== confirmPassword) return message.warning("р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Др╕бр╣Ир╕Хр╕гр╕Зр╕Бр╕▒р╕Щ");

  const userId = localStorage.getItem("userId");
  const jwt = localStorage.getItem("jwt");
  if (!userId || !jwt) return message.error("р╣Др╕бр╣Ир╕Юр╕Ър╕Вр╣Йр╕нр╕бр╕╣р╕ер╕Ьр╕╣р╣Йр╣Гр╕Кр╣Йр╕лр╕гр╕╖р╕н token");

  setLoading(true);
  try {
    const res = await resetPassword(Number(userId), newPassword, jwt);
    if (res.status === 200) {
      message.success("р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣Ир╕кр╕│р╣Ар╕гр╣Зр╕И");
      localStorage.clear();
      navigate("/");
    } else {
      message.error(res.data.error || "р╣Др╕бр╣Ир╕кр╕▓р╕бр╕▓р╕гр╕Цр╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣Ир╣Др╕Фр╣Й");
    }
  } finally {
    setLoading(false);
  }
};
const steps = ["р╕Бр╕гр╕нр╕Бр╕нр╕╡р╣Ар╕бр╕е", "р╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ър╕гр╕лр╕▒р╕к", "р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И"];

  return (
    <div className="min-h-screen flex flex-col items-center justify-center p-6 bg-gradient-to-t from-cyan-100 to-white">
      {/* Stepper */}
     
<Stepper step={step} steps={steps} />



      {/* Card */}
<div className="w-full max-w-2xl bg-white rounded-2xl shadow-lg p-10 space-y-6 mt-25">

        {step === 0 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center">ЁЯФР р╕ер╕╖р╕бр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щ</h2>
            <p className="text-center text-gray-600">
              р╕Бр╕гр╕╕р╕Ур╕▓р╕Бр╕гр╕нр╕Бр╕нр╕╡р╣Ар╕бр╕е р╕гр╕░р╕Ър╕Ър╕Ир╕░р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щр╣Др╕Ыр╣Гр╕лр╣Йр╕Др╕╕р╕У
            </p>
            <input
              type="email"
              placeholder="your@email.com"
              value={email}
              onChange={(e) => setEmail(e.target.value)}
              className="w-full border rounded-lg px-4 py-3 focus:ring-2 focus:ring-cyan-400 outline-none"
            />
            <button
              onClick={handleEmailSubmit}
              disabled={loading}
              className="w-full bg-blue-300 text-white py-3 rounded-lg hover:bg-blue-400 disabled:opacity-50 cursor-pointer"
            >
              {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕кр╣Ир╕З..." : "р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щ"}
            </button>
            <p className="text-center text-sm text-gray-500">
              <span>р╕лр╕гр╕╖р╕н </span>
              <span
                className="text-blue-500 cursor-pointer "
                onClick={() => navigate("/")}
              >
                р╕Бр╕ер╕▒р╕Ър╕кр╕╣р╣Ир╕лр╕Щр╣Йр╕▓р╕ер╣Зр╕нр╕Бр╕нр╕┤р╕Щ
              </span>
            </p>
          </div>
        )}

        {step === 1 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center">р╕Бр╕гр╕нр╕Бр╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щ</h2>
            <div className="flex justify-center space-x-3">
              {uuid.map((v, i) => (
                <input
                  key={i}
                  maxLength={1}
                  value={v}
                  onChange={(e) => {
                    const val = e.target.value;
                    if (/^[0-9a-zA-Z]?$/.test(val)) {
                      const newUuid = [...uuid];
                      newUuid[i] = val;
                      setUuid(newUuid);
                    }
                  }}
                  placeholder="р╕гр╕лр╕▒р╕кр╕вр╕╖р╕Щр╕вр╕▒р╕Щ"
                  className="w-14 h-14 border rounded-lg text-center text-xl focus:ring-2 focus:ring-cyan-400 outline-none"
                />
              ))}
            </div>
            <div className="flex justify-between items-center text-gray-600 text-sm">
              <span>р╣Ар╕зр╕ер╕▓р╕Чр╕╡р╣Ир╣Ар╕лр╕ер╕╖р╕н: <b>{formatTimer()}</b></span>
              <button
                disabled={timer > 0}
                onClick={handleEmailSubmit}
                className="text-cyan-500 disabled:opacity-50"
              >
                р╕кр╣Ир╕Зр╕гр╕лр╕▒р╕кр╣Гр╕лр╕бр╣И
              </button>
            </div>
            <button
              onClick={handleUuidSubmit}
              disabled={loading}
              className="w-full bg-blue-300text-white py-3 rounded-lg hover:bg-blue-400 disabled:opacity-50"
            >
              {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕Хр╕гр╕зр╕Ир╕кр╕нр╕Ъ..." : "р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕к"}
            </button>
          </div>
        )}

        {step === 2 && (
          <div className="space-y-6">
            <h2 className="text-2xl font-bold text-center">р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И</h2>
            <input
              type="password"
              placeholder="р╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И"
              value={newPassword}
              onChange={(e) => setNewPassword(e.target.value)}
              className="w-full border rounded-lg px-4 py-3 focus:ring-2 focus:ring-cyan-400 outline-none"
            />
            <input
              type="password"
              placeholder="р╕вр╕╖р╕Щр╕вр╕▒р╕Щр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И"
              value={confirmPassword}
              onChange={(e) => setConfirmPassword(e.target.value)}
              className="w-full border rounded-lg px-4 py-3 focus:ring-2 focus:ring-cyan-400 outline-none"
            />
            <button
              onClick={handlePasswordReset}
              disabled={loading}
              className="w-full bg-blue-300 text-white py-3 rounded-lg hover:bg-blue-400 disabled:opacity-50"
            >
              {loading ? "р╕Бр╕│р╕ер╕▒р╕Зр╕Ър╕▒р╕Щр╕Чр╕╢р╕Б..." : "р╕Хр╕▒р╣Йр╕Зр╕гр╕лр╕▒р╕кр╕Ьр╣Ир╕▓р╕Щр╣Гр╕лр╕бр╣И"}
            </button>
          </div>
        )}
      </div>
    </div>
  );
};

export default ForgotPasswordStepPage;
