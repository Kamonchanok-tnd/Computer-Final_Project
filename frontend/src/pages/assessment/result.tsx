import React, { useEffect, useState } from "react";
import { useLocation, useNavigate } from "react-router-dom";
import RSH from "../../assets/assessment/ResultHappy.png";
import RSS from "../../assets/assessment/ResultSad.png";
import RSB from "../../assets/assessment/ResultBored.png";
import {
  getAvailableGroupsAndNext,
  createAssessmentResult,
} from "../../services/https/assessment";
import { GroupOut } from "../../interfaces/IQuestionnaireGroup";

const Result: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const { transaction } = (location.state as any) || { transaction: null };

  const score = transaction?.total_score ?? 0;
  const maxScore = transaction?.max_score ?? 27;
  const resultLevel = transaction?.result_level ?? "bored";
  const testType = transaction?.test_type ?? "positive";
  const title = transaction?.result ?? "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô";

  // QID/Group ‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡∏ó‡∏µ‡πà ‚Äú‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏ó‡∏≥‡∏à‡∏£‡∏¥‡∏á‡πÜ‚Äù
  const [nextQid, setNextQid] = useState<number | null>(null);
  const [nextGroupId, setNextGroupId] = useState<number | null>(null);

  useEffect(() => {
    const userObj = JSON.parse(localStorage.getItem("user") || "{}");
    const uid = Number(userObj?.id || localStorage.getItem("id"));

    const groupIdLS = Number(localStorage.getItem("questionnaireGroupID"));
    const lastQidLS = Number(localStorage.getItem("questionnaireID"));

    console.log(
      "üîë uid:",
      uid,
      "groupId(LS):",
      groupIdLS,
      "lastQid(LS):",
      lastQidLS
    );

    if (!uid) {
      console.warn("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö uid ‡πÉ‡∏ô localStorage");
      return;
    }

    const safeGroupId = isNaN(groupIdLS) ? 0 : groupIdLS;
    const safeLastQid = isNaN(lastQidLS) ? 0 : lastQidLS;

    getAvailableGroupsAndNext(uid, "", safeLastQid)
      .then((groups: GroupOut[]) => {
        console.log("üì¶ groups from API:", groups);

        // ‡∏ñ‡πâ‡∏≤ groupId ‡πÉ‡∏ô LS ‡∏´‡∏≤‡∏¢ ‡πÉ‡∏´‡πâ fallback ‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà available
        const found =
          groups.find((g) => g.id === safeGroupId) ||
          groups.find((g) => g.available);

        console.log("üîé found group:", found);

        if (!found) {
          console.log("‚õî ‡πÑ‡∏°‡πà‡πÄ‡∏à‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ó‡∏≥‡∏≠‡∏¢‡∏π‡πà");
          setNextQid(null);
          setNextGroupId(null);
          return;
        }

        console.log("üß© ‡∏ä‡∏∑‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°:", found.name);
        console.log("üü¢ available:", found.available);
        console.log("üìå pending_quids:", found.pending_quids);

        // ‡∏Å‡∏£‡∏≠‡∏á‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ä‡∏ô‡∏Å‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡∏≥ (‡∏Å‡∏±‡∏ô‡∏Å‡∏£‡∏ì‡∏µ backend ‡∏™‡πà‡∏á lastQid ‡∏ï‡∏¥‡∏î‡∏°‡∏≤)
        const candidates = (found.pending_quids || []).filter(
          (id) => id !== safeLastQid
        );
        console.log("üßº candidates (‡∏ï‡∏±‡∏î lastQid ‡∏≠‡∏≠‡∏Å):", candidates);

        if (found.available && candidates.length > 0) {
          const qid = candidates[0];
          console.log("‚û°Ô∏è nextQid ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏´‡πâ‡∏ó‡∏≥:", qid);
          setNextQid(qid);
          setNextGroupId(found.id);

          // ‚ùå ‡∏´‡πâ‡∏≤‡∏°‡πÄ‡∏ã‡πá‡∏ï questionnaireID/assessmentResultID ‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ
          //    ‡∏£‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏î‡∏õ‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß‡∏Ñ‡πà‡∏≠‡∏¢ create AR ‡πÉ‡∏´‡∏°‡πà
        } else {
          console.log("‚úÖ ‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß (‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà available) ‚Üí ‡∏•‡πâ‡∏≤‡∏á‡∏Ñ‡πà‡∏≤");
          setNextQid(null);
          setNextGroupId(null);
          localStorage.removeItem("questionnaireGroupID");
          localStorage.removeItem("questionnaireID");
          localStorage.removeItem("assessmentResultID");
        }
      })
      .catch((err) => {
        console.error("‚ùå getAvailableGroupsAndNext error:", err);
        setNextQid(null);
        setNextGroupId(null);
      });
  }, []);

  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á AssessmentResult ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  // ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ: ‡∏ï‡πâ‡∏≠‡∏á‡∏™‡∏£‡πâ‡∏≤‡∏á AssessmentResult ‡πÉ‡∏´‡∏°‡πà‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
  const handleNext = async () => {
    if (!nextQid || !nextGroupId) {
      console.log("‚õî ‡πÑ‡∏°‡πà‡∏°‡∏µ nextQid/nextGroupId ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏î‡πâ");
      return;
    }

    try {
      const user = JSON.parse(localStorage.getItem("user") || "{}");
      const uid = Number(user?.id || localStorage.getItem("id"));
      if (!uid) {
        alert("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÉ‡∏´‡∏°‡πà");
        return;
      }

      console.log("üÜï ‡πÄ‡∏£‡∏¥‡πà‡∏° AR ‡πÉ‡∏´‡∏°‡πà‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ:", {
        nextQid,
        nextGroupId,
        uid,
      });

      const newArId = await createAssessmentResult(nextQid, uid, nextGroupId);
      console.log("‚úÖ createAssessmentResult ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à newArId =", newArId);

      // ‡πÄ‡∏ã‡πá‡∏ï‡∏ä‡∏∏‡∏î‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏´‡πâ assessments ‡πÑ‡∏õ‡∏≠‡πà‡∏≤‡∏ô
      localStorage.setItem("assessmentResultID", String(newArId));
      localStorage.setItem("questionnaireID", String(nextQid));
      localStorage.setItem("questionnaireGroupID", String(nextGroupId));

      navigate("/assessments");
    } catch (e) {
      console.error("‚ùå ‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:", e);
      alert("‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà");
    }
  };

  // ===== UI ‡πÄ‡∏î‡∏¥‡∏°‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå =====
  const percentage = (score / maxScore) * 100;
  const circumference = 2 * Math.PI * 45;
  const strokeDashoffset = circumference - (percentage / 100) * circumference;

  const getScoreColor = (p: number) => {
    if (testType === "negative") {
      if (p <= 20) return "#22c55e";
      if (p <= 40) return "#84cc16";
      if (p <= 60) return "#fffb02ff";
      if (p <= 80) return "#ff6a00ff";
      return "#ef4444";
    } else {
      if (p <= 20) return "#ef4444";
      if (p <= 40) return "#ff6a00ff";
      if (p <= 60) return "#fffb02ff";
      if (p <= 80) return "#84cc16";
      return "#22c55e";
    }
  };

  const getResultDetails = () => {
    switch (resultLevel) {
      case "happy":
        return {
          image: RSH,
          description:
            "‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÜ ü•≥\n\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏™‡∏î‡πÉ‡∏™‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞! üòä",
        };
      case "bored":
        return {
          image: RSB,
          description:
            "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ü´Ç\n\n‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
        };
      case "sad":
      default:
        return {
          image: RSS,
          description:
            "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ü´Ç\n\n‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏∞‡∏Ñ‡∏∞üë©‚Äç‚öïÔ∏è\n\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞! üòä",
        };
    }
  };

  const { image, description } = getResultDetails();
  const scoreColor = getScoreColor(percentage);

  useEffect(() => {
    const handleKeyDown = (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.code === "Space") {
        e.preventDefault();
        if (nextQid) {
          handleNext();
        } else if (transaction?.description === "‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ 9Q") {
          navigate("/chat/new");
        } else {
          navigate("/");
        }
      }
    };

    window.addEventListener("keydown", handleKeyDown);
    return () => {
      window.removeEventListener("keydown", handleKeyDown);
    };
  }, [nextQid, transaction, navigate]);

  return (
    <div className="fixed inset-0 z-[2147483647] min-h-screen flex items-center justify-center bg-gradient-to-b from-sky-100 to-white">
      <div className="bg-sky-200 rounded-2xl p-6 md:p-10 w-11/12 max-w-sm md:max-w-xl text-center shadow-xl">
        <h1 className="text-2xl md:text-3xl font-bold mb-6">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠</h1>

        <div className="relative w-48 h-48 mx-auto mb-12 mt-20">
          <svg
            className="w-48 h-48 transform -rotate-270"
            viewBox="0 0 100 100"
          >
            <circle
              cx="50"
              cy="50"
              r="45"
              stroke="#e5e7eb"
              strokeWidth="8"
              fill="none"
            />
            <circle
              cx="50"
              cy="50"
              r="45"
              stroke={scoreColor}
              strokeWidth="8"
              fill="none"
              strokeDasharray={circumference}
              strokeDashoffset={strokeDashoffset}
              strokeLinecap="round"
              className="transition-all duration-1000 ease-out"
            />
          </svg>

          <div className="absolute inset-0 flex items-center justify-center">
            <div className="bg-white rounded-full w-35 h-35 flex items-center justify-center shadow-md">
              <img
                src={image}
                alt="Result"
                className="w-40 h-40 object-contain"
              />
            </div>
          </div>

          <div className="absolute -top-18 left-1/2 transform -translate-x-1/2">
            <span className="text-6xl font-bold text-black">{score}</span>
          </div>

          <div className="absolute -bottom-4 right-8 text-sm font-medium text-gray-700">
            {maxScore}
          </div>
        </div>

        <p className="font-semibold text-lg mb-4 whitespace-pre-line">
          {title}
        </p>
        <p className="text-sm text-gray-800 leading-relaxed mb-6 whitespace-pre-line">
          {description}
        </p>

        {nextQid ? (
          <button
            onClick={handleNext}
            className="bg-green-500 text-white px-6 py-2 rounded-full hover:bg-green-700 transition mb-2"
          >
            ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
          </button>
        ) : transaction?.description === "‡πÅ‡∏ö‡∏ö‡∏Ñ‡∏±‡∏î‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏£‡∏Ñ‡∏ã‡∏∂‡∏°‡πÄ‡∏®‡∏£‡πâ‡∏≤ 9Q" ? (
          <button
            onClick={() => navigate("/chat/new")}
            className="bg-purple-500 text-white px-6 py-2 rounded-full hover:bg-purple-700 transition"
          >
            ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏ô‡∏ó‡∏ô‡∏≤
          </button>
        ) : (
          <button
            onClick={() => navigate("/")}
            className="bg-blue-500 text-white px-6 py-2 rounded-full hover:bg-blue-700 transition"
          >
            ‡∏Å‡∏•‡∏±‡∏ö‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
          </button>
        )}
      </div>
    </div>
  );
};

export default Result;
