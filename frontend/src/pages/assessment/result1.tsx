import React from "react";
import { useLocation, useNavigate } from "react-router-dom";
import RSH from "../../assets/assessment/ResultHappy.png";
import RSS from "../../assets/assessment/ResultSad.png";
import RSB from "../../assets/assessment/ResultBored.png";

const Result: React.FC = () => {
  const location = useLocation();
  const navigate = useNavigate();

  const { transaction } = location.state;

  const score = transaction?.total_score ?? 0;
  const maxScore = transaction?.max_score ?? 27;
  const resultLevel = transaction?.result_level ?? "bored";
  const testType = transaction?.test_type ?? "positive";
  const title = transaction?.result ?? "‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô";

  // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡πÅ‡∏•‡∏∞‡∏ß‡∏á‡∏Å‡∏•‡∏°
  const percentage = (score / maxScore) * 100;
  const circumference = 2 * Math.PI * 45;
  const strokeDashoffset =
    circumference - (percentage / 100) * circumference;

  // ‡∏™‡∏µ‡∏ï‡∏≤‡∏° testType
  const getScoreColor = (percentage: number) => {
    if (testType === "negative") {
      if (percentage <= 20) return "#22c55e";
      if (percentage <= 40) return "#84cc16";
      if (percentage <= 60) return "#fffb02ff";
      if (percentage <= 80) return "#ff6a00ff";
      return "#ef4444";
    } else {
      // testType === "positive"
      if (percentage <= 20) return "#ef4444";
      if (percentage <= 40) return "#ff6a00ff";
      if (percentage <= 60) return "#fffb02ff";
      if (percentage <= 80) return "#84cc16";
      return "#22c55e";
    }
  };

  // Emoji ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏à‡∏≤‡∏Å resultLevel
  const getResultDetails = () => {
    switch (resultLevel) {
      case "happy":
        return {
          image: RSH,
          description:
            "‡πÄ‡∏´‡πá‡∏ô‡πÑ‡∏î‡πâ‡∏ä‡∏±‡∏î‡∏ß‡πà‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡πÅ‡∏•‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏î‡∏µ‡πÄ‡∏¢‡∏µ‡πà‡∏¢‡∏°‡∏à‡∏£‡∏¥‡∏á ‡πÜ ü•≥\n\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡∏ä‡∏µ‡∏ß‡∏¥‡∏ï‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∏‡∏Ç‡∏™‡∏î‡πÉ‡∏™‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡∏ï‡∏•‡∏≠‡∏î‡πÑ‡∏õ‡πÄ‡∏•‡∏¢‡∏ô‡∏∞‡∏Ñ‡∏∞! üòä",
        };
      case "bored":
        return {
          image: RSB,
          description:
            "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ü´Ç\n\n‡∏Ç‡∏≠‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏à‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏ô‡∏∞‡∏Ñ‡∏∞ üòä",
        };
      case "sad":
      default:
        return {
          image: RSS,
          description:
            "‡∏Å‡∏≤‡∏£‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏à‡∏¥‡∏ï‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡πÄ‡∏£‡∏≤‡∏à‡∏∞‡∏≠‡∏¢‡∏π‡πà‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏Ç‡πâ‡∏≤‡∏á‡∏Ñ‡∏∏‡∏ì‡πÄ‡∏™‡∏°‡∏≠ü´Ç\n\n‡∏ñ‡πâ‡∏≤‡∏´‡∏≤‡∏Å‡∏Ñ‡∏∏‡∏ì‡∏£‡∏π‡πâ‡∏™‡∏∂‡∏Å‡πÑ‡∏°‡πà‡πÇ‡∏≠‡πÄ‡∏Ñ ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡πà‡∏ß‡∏¢‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡∏µ‡πà‡∏¢‡∏ß‡∏ä‡∏≤‡∏ç‡∏Å‡πá‡πÄ‡∏õ‡πá‡∏ô‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ô‡∏∞‡∏Ñ‡∏∞üë©‚Äç‚öïÔ∏è\n\n‡∏Ç‡∏≠‡πÉ‡∏´‡πâ‡∏Ñ‡∏∏‡∏ì‡∏Å‡πâ‡∏≤‡∏ß‡∏ú‡πà‡∏≤‡∏ô‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÑ‡∏õ‡πÑ‡∏î‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏Ç‡πâ‡∏°‡πÅ‡∏Ç‡πá‡∏á‡∏ô‡∏∞‡∏Ñ‡∏∞! üòä",
        };
    }
  };

  const { image, description } = getResultDetails();
  const scoreColor = getScoreColor(percentage);

  return (
    <div className="min-h-screen flex items-center justify-center bg-gradient-to-b from-sky-100 to-white">
      <div className="bg-sky-200 rounded-2xl p-8 md:p-10 max-w-md text-center shadow-xl">
        <h1 className="text-2xl md:text-3xl font-bold mb-6">‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠</h1>

        {/* Score Circle */}
        <div className="relative w-48 h-48 mx-auto mb-12 mt-20">
          <svg
            className="w-48 h-48 transform -rotate-270"
            viewBox="0 0 100 100"
          >
            <circle
              cx="50"
              cy="50"
              r="45"
              stroke="#e5e7eb"
              strokeWidth="8"
              fill="none"
            />
            <circle
              cx="50"
              cy="50"
              r="45"
              stroke={scoreColor}
              strokeWidth="8"
              fill="none"
              strokeDasharray={circumference}
              strokeDashoffset={strokeDashoffset}
              strokeLinecap="round"
              className="transition-all duration-1000 ease-out"
            />
          </svg>

          {/* Center Emoji */}
          <div className="absolute inset-0 flex items-center justify-center">
            <div className="bg-white rounded-full w-35 h-35 flex items-center justify-center shadow-md">
              <img
                src={image}
                alt="Result"
                className="w-40 h-40 object-contain"
              />
            </div>
          </div>

          {/* Score Number */}
          <div className="absolute -top-18 left-1/2 transform -translate-x-1/2">
            <span className="text-6xl font-bold text-black">{score}</span>
          </div>

          {/* Scale Label */}
          <div className="absolute -bottom-4 right-8 text-sm font-medium text-gray-700">
            {maxScore}
          </div>
        </div>

        <p className="font-semibold text-lg mb-4 whitespace-pre-line">
          {title}
        </p>

        <p className="text-sm text-gray-800 leading-relaxed mb-6 whitespace-pre-line">
          {description}
        </p>

        <button
          onClick={() => navigate("/")}
          className="bg-gray-100 text-white px-6 py-2 rounded-full hover:bg-blue-700 transition"
        >
          ‚û°Ô∏è
        </button>
      </div>
    </div>
  );
};

export default Result;
