import { Questionnaire } from "../../../interfaces/IQuestionnaire";
import { Question } from "../../../interfaces/IQuestion";
import { AnswerOption } from "../../../interfaces/IAnswerOption";
import { EmotionChoice } from "../../../interfaces/IEmotionChoices";
const apiUrl = "http://localhost:8000";

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllQuestionnaires = async (): Promise<Questionnaire[]> => {
    try {
        const token = localStorage.getItem("token");

        const response = await fetch(`${apiUrl}/questionnaires`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
            },
        });

        if (!response.ok) {
            throw new Error(`Error: ${response.status}`);
        }

        const rawData = await response.json();

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ü‡∏¥‡∏•‡∏î‡πå‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö frontend
        const data: Questionnaire[] = rawData.map((q: any) => ({
            id: q.ID,
            nameQuestionnaire: q.NameQuestionnaire,
            description: q.Description,
            quantity: q.Quantity,
            uid: q.UID,
        }));

        return data;
    } catch (error) {
        console.error("Error fetching questionnaires:", error);
        return [];
    }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á EmotionChoice ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllEmotionChoices = async (): Promise<EmotionChoice[]> => {
    try {
        const token = localStorage.getItem("token");

        const response = await fetch(`${apiUrl}/getallemotionchoices`, {
            method: "GET",
            headers: {
                "Content-Type": "application/json",
                Authorization: `Bearer ${token}`,
            },
        });

        if (!response.ok) {
            throw new Error(`Error: ${response.status}`);
        }

        const rawData = await response.json();

        // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏ô frontend
        const data: EmotionChoice[] = rawData.map((e: any) => ({
            id: e.ID,
            name: e.name, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö JSON
            picture: e.picture, // ‚úÖ ‡πÉ‡∏ä‡πâ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡πá‡∏Å‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö JSON
            answerOptions: e.AnswerOptions,
        }));


        return data;
    } catch (error) {
        console.error("Error fetching emotion choices:", error);
        return [];
    }
};



// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö
export const createQuestionnaire = async (questionnaireData: Questionnaire) => {
  try {
    const response = await fetch(`${apiUrl}/createQuestionnaires`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${localStorage.getItem("token")}`,
      },
      body: JSON.stringify(questionnaireData),
    });

    if (!response.ok) throw new Error(`Error: ${response.statusText}`);

    const resJson = await response.json();
    return resJson; // ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏ï‡πâ‡∏≠‡∏á return json ‡∏ó‡∏µ‡πà‡∏°‡∏µ id
  } catch (error) {
    console.error("Error creating questionnaire:", error);
    throw error;
  }
};



// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°
export interface QuestionWithAnswers {
  question: Question;
  answers: AnswerOption[];
}


export const createQuestions = async (input: QuestionWithAnswers[]) => {
  const token = localStorage.getItem("token");

  const payload = input.map(({ question, answers }) => ({
    question: {
      // *** ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á id ***
      nameQuestion: question.nameQuestion,
      quID: question.quID,
      priority: (question as any).priority,      // ‡∏ñ‡πâ‡∏≤‡∏´‡∏•‡∏±‡∏á‡∏ö‡πâ‡∏≤‡∏ô‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö
      picture: question.picture ?? null,         // ‡∏ñ‡πâ‡∏≤‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡∏£‡∏π‡∏õ
    },
    answers: answers
      .filter(a => a.description.trim() !== "")
      .map(a => ({
        // *** ‡∏≠‡∏¢‡πà‡∏≤‡∏™‡πà‡∏á id ***
        description: a.description,
        point: a.point,
        EmotionChoiceID:
          a.EmotionChoiceID === 0 || a.EmotionChoiceID === undefined
            ? null
            : a.EmotionChoiceID,
      })),
  }));

  console.log("üöÄ createQuestions payload =", payload);
  console.log("üßæ JSON =", JSON.stringify(payload, null, 2));

  const res = await fetch(`${apiUrl}/createQuestions`, {
    method: "POST",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token || ""}`,
    },
    body: JSON.stringify(payload),
  });
  if (!res.ok) throw new Error(`Error: ${res.status}`);
  return res.json();
};



// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏î‡∏∂‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
export const getAllUsers = async () => {
  const token = localStorage.getItem("token");
  const response = await fetch(`${apiUrl}/users`, {
    headers: {
      Authorization: `Bearer ${token || ""}`,
    },
  });
  if (!response.ok) throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ");
  return await response.json();
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î)
export const deleteQuestionnaire = async (id: number) => {
  const token = localStorage.getItem("token");
  const response = await fetch(`${apiUrl}/deletequestionnaire/${id}`, {
    method: "DELETE",
    headers: {
      "Content-Type": "application/json",
      Authorization: `Bearer ${token || ""}`,
    },
  });

  if (!response.ok) {
    throw new Error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡πÑ‡∏î‡πâ");
  }

  return await response.json();
};


// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÄ‡πÄ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏≠‡∏±‡∏û‡πÄ‡∏î‡∏ï‡∏Ñ‡πà‡∏≤‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠
export const deleteQuestion = async (id: number) => {
  const token = localStorage.getItem("token");

  try {
    const response = await fetch(`${apiUrl}/deletequestion/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token || ""}`,
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ");
    }

    return await response.json();
  } catch (error: any) {
    throw new Error(error.message || "‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°");
  }
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö
export const deleteAnswer = async (
  id: number
): Promise<any> => {
  try {
   
    const token = localStorage.getItem("token");
    const response = await fetch(`${apiUrl}/deleteanswer/${id}`, {
      method: "DELETE",
      headers: {
        "Content-Type": "application/json",
         Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      const errorData = await response.json().catch(() => ({}));
      throw new Error(errorData.message || "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ");
    }

    return await response.json(); // ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏∏‡∏ì‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏à‡∏≤‡∏Å backend ‡πÑ‡∏î‡πâ
  } catch (error) {
    console.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", error);
    throw new Error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö");
  }
};


export const getQuestionnaireById = async (id: number): Promise<Questionnaire> => {
  try {
    const token = localStorage.getItem("token");

    const response = await fetch(`${apiUrl}/getquestionnaire/${id}`, {
      method: "GET",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token}`,
      },
    });

    if (!response.ok) {
      const errText = await response.text();
      console.error(" Server Response:", response.status, errText);
      throw new Error(`Error: ${response.status}`);
    }

    const rawData = await response.json();
    console.log("üì¶ rawData ‡∏à‡∏≤‡∏Å backend:", rawData);

    // ‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å backend ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö interface
    const questionnaire: Questionnaire = {
      id: rawData.ID,
      nameQuestionnaire: rawData.NameQuestionnaire,
      description: rawData.Description,
      quantity: rawData.Quantity,
      uid: rawData.UID,
      testType: rawData.TestType, // Add this line to include testType
      questions: (rawData.Questions ?? []).map((q: any) => ({
        id: q.ID,
        nameQuestion: q.nameQuestion,
        quID: q.quID,
        priority: q.priority,
        picture: q.picture || null, 
        answers: (q.answerOptions ?? []).map((a: any) => ({
          id: a.ID,
          description: a.description,
          point: a.point,
        })),
      })),
      groups: []
    };

    return questionnaire;
  } catch (error) {
    console.error("Error fetching questionnaire:", error);
    throw error;
  }
};



// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡πÅ‡∏ö‡∏ö‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡πÅ‡∏•‡∏∞‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
export const updateQuestionnaire = async (id: number, data: any) => {
  try {
    const token = localStorage.getItem("token");

    const response = await fetch(`${apiUrl}/updatequestionnaire/${id}`, {
      method: "PATCH",
      headers: {
        "Content-Type": "application/json",
        Authorization: `Bearer ${token || ""}`,
      },
      body: JSON.stringify(data),
    });

    if (!response.ok) {
      throw new Error(`Error updating questionnaire: ${response.statusText}`);
    }

    return await response.json();
  } catch (error) {
    console.error("Error updating questionnaire:", error);
    throw error;
  }
};




