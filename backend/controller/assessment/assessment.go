package assessment

import (
	"net/http"
	"sukjai_project/config"
	"sukjai_project/entity"
	"sukjai_project/util"

	"fmt"
	"math"
	"strconv"
	"strings"
	"time"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"log"
)

func GetAllAssessmentAnswers(c *gin.Context) {
	var answers []entity.AssessmentAnswer
	if err := config.DB().Find(&answers).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á AssessmentAnswers ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, answers)
}

func GetAllAssessmentResults(c *gin.Context) {
	var results []entity.AssessmentResult
	if err := config.DB().
		Preload("Answers").
		Preload("Transaction").
		Find(&results).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á AssessmentResults ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, results)
}

func GetAllCalculations(c *gin.Context) {
	var calculations []entity.Calculation
	if err := config.DB().
		Preload("Criteria").
		Find(&calculations).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Calculations ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, calculations)
}

func GetAllQuestionnaires(c *gin.Context) {
	var questionnaires []entity.Questionnaire
	if err := config.DB().
		Preload("Users").
		Preload("Questions").
		Find(&questionnaires).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Questionnaires ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, questionnaires)
}

func GetAnswerOptionByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var answerOption entity.AnswerOption
	if err := config.DB().Preload("AssessmentAnswers").First(&answerOption, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö AnswerOption", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, answerOption)
}

func GetAssessmentAnswerByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var answer entity.AssessmentAnswer
	if err := config.DB().First(&answer, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö AssessmentAnswer", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, answer)
}

func GetAssessmentResultByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var result entity.AssessmentResult
	if err := config.DB().
		Preload("Answers").
		Preload("Transaction").
		First(&result, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö AssessmentResult", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, result)
}

func GetCalculationByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var calc entity.Calculation
	if err := config.DB().Preload("Criteria").First(&calc, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Calculation", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, calc)
}

func GetCriteriaByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var criteria entity.Criteria
	if err := config.DB().Preload("Calculations").First(&criteria, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Criteria", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, criteria)
}

func GetQuestionByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var question entity.Question
	if err := config.DB().Preload("Questionnaire").First(&question, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Question", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, question)
}

//////////////////////////////////////////////////////////////// USER //////////////////////////////////////////////////////////////////////

func GetQuestionnaireByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var questionnaire entity.Questionnaire
	if err := config.DB().
		Preload("Users").
		Preload("Questions").
		First(&questionnaire, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Questionnaire", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, questionnaire)
}

func GetAllQuestions(c *gin.Context) {
	var questions []entity.Question
	if err := config.DB().
		Preload("Questionnaire").
		Find(&questions).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Questions ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, questions)
}

func GetAllAnswerOptions(c *gin.Context) {
	var answerOptions []entity.AnswerOption
	if err := config.DB().Preload("AssessmentAnswers").Find(&answerOptions).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á AnswerOptions ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, answerOptions)
}

func GetAllCriteria(c *gin.Context) {
	quIDStr := c.Query("qu_id")

	// ‡∏ñ‡πâ‡∏≤‡πÑ‡∏°‡πà‡∏™‡πà‡∏á qu_id -> ‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏î‡∏¥‡∏°
	if quIDStr == "" {
		var criteria []entity.Criteria
		if err := config.DB().
			Preload("Calculations").
			Find(&criteria).Error; err != nil {
			util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Criteria ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
			return
		}
		c.JSON(http.StatusOK, criteria)
		return
	}

	// ‡∏°‡∏µ qu_id -> ‡∏î‡∏∂‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞ Criteria ‡∏ó‡∏µ‡πà‡∏°‡∏µ Calculation ‡∏Ç‡∏≠‡∏á qu_id ‡∏ô‡∏µ‡πâ
	quID, err := strconv.ParseUint(quIDStr, 10, 64)
	if err != nil {
		util.HandleError(c, http.StatusBadRequest, "qu_id ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_QU_ID")
		return
	}

	var criteria []entity.Criteria

	// subquery: ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å c_id ‡∏à‡∏≤‡∏Å‡∏ï‡∏≤‡∏£‡∏≤‡∏á calculations ‡∏ï‡∏≤‡∏° qu_id
	sub := config.DB().
		Model(&entity.Calculation{}).
		Select("c_id").
		Where("qu_id = ?", quID)

	// ‡∏î‡∏∂‡∏á Criteria ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô subquery ‡πÅ‡∏•‡∏∞ preload Calculations ‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏Ç‡∏≠‡∏á qu_id ‡∏ô‡∏µ‡πâ
	if err := config.DB().
		Where("id IN (?)", sub).
		Preload("Calculations", "qu_id = ?", quID).
		Find(&criteria).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Criteria ‡∏ï‡∏≤‡∏° qu_id ‡πÑ‡∏î‡πâ", "CRITERIA_FETCH_FAILED")
		return
	}

	c.JSON(http.StatusOK, criteria)
}

func GetAllTransaction(c *gin.Context) {
	var transaction []entity.Transaction
	if err := config.DB().Find(&transaction).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á Transaction ‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	c.JSON(http.StatusOK, transaction)
}

func GetTransactionByID(c *gin.Context) {
	id, _ := strconv.Atoi(c.Param("id"))
	var tx entity.Transaction
	if err := config.DB().First(&tx, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Transaction", "NOT_FOUND")
		return
	}
	c.JSON(http.StatusOK, tx)
}

func CreateAssessmentResult(c *gin.Context) {
	var input entity.AssessmentResult
	if err := c.ShouldBindJSON(&input); err != nil {
		util.HandleError(c, http.StatusBadRequest, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_INPUT")
		return
	}
	if err := config.DB().Create(&input).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡∏£‡πâ‡∏≤‡∏á AssessmentResult ‡πÑ‡∏î‡πâ", "CREATE_FAILED")
		return
	}
	c.JSON(http.StatusCreated, input)
}

func SubmitAssessmentAnswer(c *gin.Context) {
	var input entity.AssessmentAnswer
	if err := c.ShouldBindJSON(&input); err != nil {
		util.HandleError(c, http.StatusBadRequest, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_INPUT")
		return
	}

	// ‚úÖ Log ‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤
	fmt.Printf("‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö: %+v\n", input)

	if err := config.DB().Create(&input).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏î‡πâ", "CREATE_FAILED")
		return
	}
	c.JSON(http.StatusCreated, input)
}

func FinishAssessment(c *gin.Context) {
	assessmentResultID := c.Param("id")
	log.Println("üì• ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å FinishAssessment, id =", assessmentResultID)

	if assessmentResultID == "" {
		util.HandleError(c, http.StatusBadRequest, "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ assessmentResultID", "MISSING_ARID")
		return
	}

	// 1) ‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
	var answers []entity.AssessmentAnswer
	if err := config.DB().
		Where("ar_id = ?", assessmentResultID).
		Find(&answers).Error; err != nil {
		log.Println("‚ùå Load answers error:", err)
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡πÑ‡∏î‡πâ", "FETCH_FAILED")
		return
	}
	log.Printf("üìä ‡∏î‡∏∂‡∏á answers ‡πÑ‡∏î‡πâ %d records\n", len(answers))

	if len(answers) == 0 {
		log.Println("‚ö†Ô∏è ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ô‡∏µ‡πâ")
		util.HandleError(c, http.StatusUnprocessableEntity, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "NO_ANSWERS")
		return
	}

	// 2) ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
	total := 0
	for _, ans := range answers {
		total += ans.Point
	}
	log.Println("üìä ‡∏£‡∏ß‡∏°‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô =", total)

	// 3) ‡πÇ‡∏´‡∏•‡∏î AR
	aridUint, err := strconv.ParseUint(assessmentResultID, 10, 64)
	if err != nil {
		log.Println("‚ùå ‡πÅ‡∏õ‡∏•‡∏á assessmentResultID ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ:", err)
		util.HandleError(c, http.StatusBadRequest, "‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö assessmentResultID ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "BAD_ARID")
		return
	}

	var ar entity.AssessmentResult
	if err := config.DB().
		Preload("Questionnaire").
		Preload("QuestionnaireGroup").
		Where("id = ?", aridUint).
		First(&ar).Error; err != nil {
		log.Println("‚ùå Load AR error:", err)
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö AssessmentResult", "NOT_FOUND")
		return
	}
	log.Printf("üìÑ AR ‡πÇ‡∏´‡∏•‡∏î‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: QuID=%d, QGID=%d\n", ar.QuID, ar.QGID)

	// 4) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ñ‡πà‡∏≤ questionnaire/group
	qName := "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏ä‡∏∑‡πà‡∏≠‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°"
	testType := ""
	if ar.Questionnaire.ID != 0 {
		qName = ar.Questionnaire.NameQuestionnaire
		if ar.Questionnaire.TestType != nil {
			testType = *ar.Questionnaire.TestType
		}
	}
	groupName := "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°"
	if ar.QuestionnaireGroup.ID != 0 {
		groupName = ar.QuestionnaireGroup.Name
	}
	log.Println("üìÑ Questionnaire =", qName, "Group =", groupName, "TestType =", testType)

	// 5) ‡πÇ‡∏´‡∏•‡∏î criteria
	var criteriaList []entity.Criteria
	if err := config.DB().
		Joins("JOIN calculations ON calculations.c_id = criteria.id").
		Where("calculations.qu_id = ?", ar.QuID).
		Find(&criteriaList).Error; err != nil {
		log.Println("‚ùå Load criteria error:", err)
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÑ‡∏î‡πâ", "CRITERIA_FETCH_FAILED")
		return
	}
	log.Printf("üìä ‡∏î‡∏∂‡∏á criteria ‡πÑ‡∏î‡πâ %d records\n", len(criteriaList))

	if len(criteriaList) == 0 {
		util.HandleError(c, http.StatusUnprocessableEntity, "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "NO_CRITERIA")
		return
	}

	// 6) ‡∏´‡∏≤ criteria ‡∏ó‡∏µ‡πà match
	var matchedCriteria entity.Criteria
	found := false
	for _, cr := range criteriaList {
		if total >= cr.MinCriteriaScore && total <= cr.MaxCriteriaScore {
			matchedCriteria = cr
			found = true
			break
		}
	}
	if !found {
		log.Println("‚ùå ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÉ‡∏î‡πÄ‡∏•‡∏¢")
		util.HandleError(c, http.StatusUnprocessableEntity, "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå", "NO_MATCHING_CRITERIA")
		return
	}
	log.Println("‚úÖ Match criteria:", matchedCriteria.Description)

	// 7) ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì result/resultLevel
	result := matchedCriteria.Description
	resultLevel := "neutral"

	// min-max score
	minScore, maxScore := math.MaxInt32, math.MinInt32
	for _, cr := range criteriaList {
		if cr.MinCriteriaScore < minScore {
			minScore = cr.MinCriteriaScore
		}
		if cr.MaxCriteriaScore > maxScore {
			maxScore = cr.MaxCriteriaScore
		}
	}
	if minScore == math.MaxInt32 {
		minScore = 0
	}
	if maxScore == math.MinInt32 {
		maxScore = 0
	}

	// --- ‡πÉ‡∏ä‡πâ tagged switch ‡πÅ‡∏ó‡∏ô if/else ‡πÄ‡∏î‡∏¥‡∏° (‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏î‡∏¥‡∏°) ---
	if len(criteriaList) == 2 {
		switch testType { // positive/negative ‡∏™‡∏≠‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö
		case "positive":
			if matchedCriteria.MaxCriteriaScore == maxScore {
				resultLevel = "happy"
			} else {
				resultLevel = "sad"
			}
		case "negative":
			if matchedCriteria.MinCriteriaScore == minScore {
				resultLevel = "happy"
			} else {
				resultLevel = "sad"
			}
		default:
			resultLevel = "bored"
		}
	} else {
		// ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤‡∏Å‡∏•‡∏≤‡∏á: ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" ‡πÉ‡∏ä‡πâ midpoint ‡∏Ç‡∏≠‡∏á‡∏ä‡πà‡∏ß‡∏á‡∏ô‡∏±‡πâ‡∏ô ‡πÑ‡∏°‡πà‡∏á‡∏±‡πâ‡∏ô‡πÉ‡∏ä‡πâ (min+max)/2
		boredMid := (minScore + maxScore) / 2
		var midMin, midMax int
		var hasMedium bool
		for _, cr := range criteriaList {
			if strings.Contains(cr.Description, "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á") {
				boredMid = (cr.MinCriteriaScore + cr.MaxCriteriaScore) / 2
				midMin, midMax = cr.MinCriteriaScore, cr.MaxCriteriaScore
				hasMedium = true
				break
			}
		}

		// ‚úÖ ‡∏ñ‡πâ‡∏≤ criteria ‡∏ó‡∏µ‡πà‡πÅ‡∏°‡∏ï‡∏ä‡πå‡∏Ñ‡∏∑‡∏≠ "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á" ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô bored ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
		if hasMedium && total >= midMin && total <= midMax {
			resultLevel = "bored"
		} else {
			switch testType {
			case "negative":
				switch {
				case total < boredMid:
					resultLevel = "happy"
				case total > boredMid:
					resultLevel = "sad"
				default:
					resultLevel = "bored"
				}
			case "positive":
				switch {
				case total < boredMid:
					resultLevel = "sad"
				case total > boredMid:
					resultLevel = "happy"
				default:
					resultLevel = "bored"
				}
			default:
				resultLevel = "bored"
			}
		}
	}

	log.Println("üéØ Result:", result, "Level:", resultLevel)

	// 8) ‡∏´‡∏≤‡∏Ñ‡πà‡∏≤ MaxScore
	finalMax := 0
	for _, cr := range criteriaList {
		if cr.MaxCriteriaScore > finalMax {
			finalMax = cr.MaxCriteriaScore
		}
	}

	// 9) ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Transaction
	tx := entity.Transaction{
		Description:        qName,
		TotalScore:         total,
		MaxScore:           finalMax,
		Result:             result,
		ResultLevel:        resultLevel,
		TestType:           testType,
		QuestionnaireGroup: groupName,
		ARID:               uint(aridUint),
	}
	log.Printf("üìù ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏° Transaction: %+v\n", tx)

	// 10) Save Transaction
	if err := config.DB().Create(&tx).Error; err != nil {
		log.Println("‚ùå Transaction Create Error:", err)
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å Transaction ‡πÑ‡∏î‡πâ", "CREATE_FAILED")
		return
	}
	log.Println("‚úÖ Transaction created, ID =", tx.ID)

	// 11) Response
	c.JSON(http.StatusCreated, gin.H{
		"message":     "‡∏™‡πà‡∏á‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
		"total_score": total,
		"transaction": tx,
	})
}

// GET /assessments/available-next?user_id=1
// GET /assessments/available-next?user_id=1&trigger_context=onLogin&last_quid=4
func GetAvailableGroupsAndNextQuestionnaire(c *gin.Context) {
	uid := c.Query("user_id")
	context := c.Query("trigger_context") // "", "onLogin", "afterChat", "interval"
	lastQuidStr := c.Query("last_quid")

	if uid == "" {
		util.HandleError(c, http.StatusBadRequest, "‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ user_id", "MISSING_USER")
		return
	}

	var lastQuid uint
	if lastQuidStr != "" {
		if parsed, err := strconv.ParseUint(lastQuidStr, 10, 64); err == nil {
			lastQuid = uint(parsed)
		}
	}

	// ‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏ñ‡πâ‡∏≤‡∏£‡∏∞‡∏ö‡∏∏ context ‡∏°‡∏≤‡∏Å‡πá‡∏Å‡∏£‡∏≠‡∏á‡∏ï‡∏≤‡∏° trigger_type)
	var groups []entity.QuestionnaireGroup
	q := config.DB()
	if context != "" {
		q = q.Where("trigger_type = ?", context)
	}
	if err := q.Find(&groups).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÇ‡∏´‡∏•‡∏î‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "FETCH_FAILED")
		return
	}

	type NextQ struct {
		ID             uint   `json:"id"`
		Name           string `json:"name"`
		OrderInGroup   uint   `json:"order_in_group"`
		ConditionOnID  *uint  `json:"condition_on_id"`
		ConditionScore *int   `json:"condition_score"`
	}

	type GroupOut struct {
		ID            uint    `json:"id"`
		Name          string  `json:"name"`
		Description   string  `json:"description"`
		FrequencyDays *uint   `json:"frequency_days"`
		TriggerType   *string `json:"trigger_type"`
		Available     bool    `json:"available"`
		Reason        string  `json:"reason"`
		Next          *NextQ  `json:"next"`
		PendingQuids  []uint  `json:"pending_quids"`
	}

	var out []GroupOut

	for _, g := range groups {
		trigger := ""
		if g.TriggerType != nil {
			trigger = *g.TriggerType
		}

		// 1) ‡∏´‡∏≤‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ó‡∏≥‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏ï‡∏≤‡∏° order_in_group)
		var links []entity.QuestionnaireGroupQuestionnaire
		if err := config.DB().
			Preload("Questionnaire").
			Where("questionnaire_group_id = ?", g.ID).
			Order("order_in_group ASC").
			Find(&links).Error; err != nil {
			// ‡∏Ç‡πâ‡∏≤‡∏°‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏ñ‡πâ‡∏≤‡πÇ‡∏´‡∏•‡∏î‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
			continue
		}

		var pendingQuids []uint
		var nextQ *NextQ

		for _, l := range links {
			qn := l.Questionnaire

			// 1) ‡∏Ç‡πâ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡∏≥‡∏•‡πà‡∏≤‡∏™‡∏∏‡∏î (‡∏Å‡∏±‡∏ô loop ‡∏ß‡∏ô‡∏Å‡∏•‡∏±‡∏ö)
			if lastQuid != 0 && qn.ID == lastQuid {
				continue
			}

			// 2) ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ "‡πÅ‡∏•‡πâ‡∏ß" ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ onLogin ‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô (‡∏Ñ‡∏á‡∏Ç‡∏≠‡∏á‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏ß‡πâ)
			var cnt int64
			if err := config.DB().Model(&entity.AssessmentResult{}).
				Where("uid = ? AND qu_id = ?", uid, qn.ID).
				Count(&cnt).Error; err != nil {
				log.Println("‚ö†Ô∏è count ar error:", err)
			}
			if trigger == "onLogin" { // ‚Üê afterChat/interval ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥‡πÑ‡∏î‡πâ‡∏Ç‡πâ‡∏≤‡∏°‡∏£‡∏≠‡∏ö
				if cnt > 0 {
					continue
				}
			}

			// ‚úÖ NEW: afterChat ‡∏Å‡∏±‡∏ô‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏ã‡πâ‡∏≥ ‚Äú‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô‚Äù (‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô interval)
			if trigger == "afterChat" && g.FrequencyDays != nil {
				windowStart := time.Now().Add(-time.Duration(*g.FrequencyDays) * time.Minute)

				var doneInWindow int64
				if err := config.DB().Model(&entity.Transaction{}).
					Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
					Where("ar.uid = ? AND ar.qg_id = ? AND ar.qu_id = ? AND transactions.created_at >= ?",
						uid, g.ID, qn.ID, windowStart).
					Count(&doneInWindow).Error; err == nil && doneInWindow > 0 {
					// ‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡πâ‡∏≤‡∏° ‡πÑ‡∏õ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ
					continue
				}
			}

			// ‚úÖ ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö interval: ‡∏ñ‡πâ‡∏≤‡∏ñ‡∏π‡∏Å‡∏ó‡∏≥‡∏†‡∏≤‡∏¢‡πÉ‡∏ô "‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤" ‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡∏Ç‡πâ‡∏≤‡∏° (‡∏Å‡∏±‡∏ô‡∏ß‡∏ô‡πÅ‡∏Ñ‡πà 2 ‡∏≠‡∏±‡∏ô)
			if trigger == "interval" && g.FrequencyDays != nil {
				// DEV ‡πÉ‡∏ä‡πâ Minute; PROD ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 24*time.Hour
				windowStart := time.Now().Add(-time.Duration(*g.FrequencyDays) * 24 * time.Hour)

				var doneInWindow int64
				if err := config.DB().Model(&entity.Transaction{}).
					Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
					Where("ar.uid = ? AND ar.qg_id = ? AND ar.qu_id = ? AND transactions.created_at >= ?",
						uid, g.ID, qn.ID, windowStart).
					Count(&doneInWindow).Error; err == nil && doneInWindow > 0 {
					// ‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏Ç‡πâ‡∏≤‡∏°‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏õ‡∏ï‡∏±‡∏ß‡∏ñ‡∏±‡∏î‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
					continue
				}
			}

			// 3) ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
			if qn.ConditionOnID != nil && qn.ConditionScore != nil && qn.ConditionType != nil {
				var tx entity.Transaction
				// NOTE: ‡∏ñ‡πâ‡∏≤ schema ‡∏Ñ‡∏∏‡∏ì‡πÉ‡∏ä‡πâ "quid" ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ ar.quid; ‡∏ñ‡πâ‡∏≤‡πÉ‡∏ä‡πâ "qu_id" ‡πÉ‡∏´‡πâ‡πÅ‡∏Å‡πâ‡πÄ‡∏õ‡πá‡∏ô ar.qu_id
				err := config.DB().
					Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
					Where("ar.uid = ? AND ar.qu_id = ?", uid, *qn.ConditionOnID).
					Order("transactions.created_at DESC").
					First(&tx).Error
				if err != nil {
					// ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏ï‡∏±‡∏ß‡∏ó‡∏µ‡πà‡∏û‡∏∂‡πà‡∏á‡∏û‡∏≤ ‚Üí ‡∏ó‡∏≥‡∏ï‡∏±‡∏ß‡∏ô‡∏µ‡πâ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ
					continue
				}

				switch *qn.ConditionType {
				case "greaterThan":
					// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï ">= threshold" ‡∏ï‡∏≤‡∏°‡∏™‡πÄ‡∏õ‡∏Ñ 9Q ‡∏´‡∏•‡∏±‡∏á 2Q >= 1
					if tx.TotalScore < *qn.ConditionScore {
						continue
					}
				case "lessThan":
					// ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï "<= threshold"
					if tx.TotalScore > *qn.ConditionScore || tx.TotalScore == *qn.ConditionScore {
						continue
					}
				default:
					// ‡πÑ‡∏°‡πà‡∏£‡∏π‡πâ‡∏à‡∏±‡∏Å‡∏ä‡∏ô‡∏¥‡∏î‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç ‡∏Å‡πá‡∏Å‡∏±‡∏ô‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô
					continue
				}
			}

			// 4) ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏ô‡∏µ‡πâ ‚Äú‡∏ó‡∏≥‡πÑ‡∏î‡πâ‚Äù
			pendingQuids = append(pendingQuids, qn.ID)

			// ‡∏ï‡∏±‡∏ß‡πÅ‡∏£‡∏Å‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏Ñ‡∏∑‡∏≠ nextQ
			if nextQ == nil {
				nextQ = &NextQ{
					ID:             qn.ID,
					Name:           qn.NameQuestionnaire,
					OrderInGroup:   l.OrderInGroup,
					ConditionOnID:  qn.ConditionOnID,
					ConditionScore: qn.ConditionScore,
				}
			}
		}

		// 2) ‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á available/reason ‡∏ï‡∏≤‡∏° trigger
		available := false
		reason := "‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"

		// ‡πÉ‡∏´‡πâ interval ‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏°‡πâ pendingQuids ‡∏à‡∏∞‡∏ß‡πà‡∏≤‡∏á
		switch trigger {
		case "interval":
			var lastTx entity.Transaction
			err := config.DB().
				Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
				Where("ar.uid = ? AND ar.qg_id = ?", uid, g.ID).
				Order("transactions.created_at DESC").
				First(&lastTx).Error

			if g.FrequencyDays != nil {
				wait := time.Duration(*g.FrequencyDays) * 24 * time.Hour // Dev ‡πÉ‡∏ä‡πâ time.Minute; Prod ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô 24*time.Hour

				if err == nil {
					inSameWindow := time.Since(lastTx.CreatedAt) < wait

					if inSameWindow {
						if len(pendingQuids) > 0 {
							// ‡∏¢‡∏±‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏≠‡∏ö‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‡πÅ‡∏•‡∏∞‡∏¢‡∏±‡∏á‡πÄ‡∏´‡∏•‡∏∑‡∏≠ ‚Üí ‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ
							available = true
							reason = fmt.Sprintf("‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
						} else {
							// ‡∏£‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡∏£‡∏≠‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏´‡∏•‡∏∑‡∏≠
							remain := (wait - time.Since(lastTx.CreatedAt)).Round(time.Minute)
							available = false
							reason = fmt.Sprintf("‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å %v", remain)
						}
					} else {
						// ‡∏û‡πâ‡∏ô‡∏£‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà; ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ pending ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡∏ó‡∏±‡∏ô‡∏ó‡∏µ
						if len(pendingQuids) > 0 {
							available = true
							reason = fmt.Sprintf("‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
						} else {
							// (‡πÄ‡∏Ñ‡∏™‡∏´‡∏≤‡∏¢‡∏≤‡∏Å) ‡πÑ‡∏°‡πà‡∏°‡∏µ pending ‡πÄ‡∏û‡∏£‡∏≤‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏á‡∏∑‡πà‡∏≠‡∏ô‡πÑ‡∏Ç‡∏≠‡∏∑‡πà‡∏ô‡∏ï‡∏±‡∏î‡∏≠‡∏≠‡∏Å‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
							available = false
							reason = "‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ"
						}
					}
				} else {
					// ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ interval ‚Üí ‡∏≠‡∏¥‡∏á onLogin
					var baselineTx entity.Transaction
					err2 := config.DB().
						Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
						Joins("JOIN questionnaire_groups qg ON qg.id = ar.qg_id").
						Where("ar.uid = ? AND qg.trigger_type = ?", uid, "onLogin").
						Order("transactions.created_at DESC").
						First(&baselineTx).Error

					if err2 != nil {
						available = false
						reason = "‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° onLogin ‡∏Å‡πà‡∏≠‡∏ô"
					} else {
						inSameWindow := time.Since(baselineTx.CreatedAt) < wait
						if inSameWindow {
							remain := (wait - time.Since(baselineTx.CreatedAt)).Round(time.Minute)
							available = false
							reason = fmt.Sprintf("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ‡∏ï‡πâ‡∏≠‡∏á‡∏£‡∏≠‡∏≠‡∏µ‡∏Å %v", remain)
						} else {
							if len(pendingQuids) > 0 {
								available = true
								reason = fmt.Sprintf("‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡∏Ç‡∏≠‡∏á interval ‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
							} else {
								available = false
								reason = "‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ"
							}
						}
					}
				}
			} else {
				// ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ‚Üí ‡πÉ‡∏´‡πâ‡∏ó‡∏≥‡∏à‡∏ô‡∏´‡∏°‡∏î
				if len(pendingQuids) > 0 {
					available = true
					reason = fmt.Sprintf("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
				} else {
					available = false
					reason = "‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"
				}
			}

		case "afterChat":
			// ‚úÖ ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô interval ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏û‡∏∂‡πà‡∏á onLogin ‡πÄ‡∏õ‡πá‡∏ô baseline
			if g.FrequencyDays != nil {
				wait := time.Duration(*g.FrequencyDays) * time.Minute

				var lastTx entity.Transaction
				err := config.DB().
					Joins("JOIN assessment_results ar ON ar.id = transactions.ar_id").
					Where("ar.uid = ? AND ar.qg_id = ?", uid, g.ID).
					Order("transactions.created_at DESC").
					First(&lastTx).Error

				if err == nil { // ‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡∏°‡∏≤‡πÅ‡∏•‡πâ‡∏ß
					inSameWindow := time.Since(lastTx.CreatedAt) < wait
					if inSameWindow {
						if len(pendingQuids) > 0 {
							available = true
							reason = fmt.Sprintf("‡∏ó‡∏≥‡∏ï‡πà‡∏≠‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
						} else {
							remain := (wait - time.Since(lastTx.CreatedAt)).Round(time.Minute)
							available = false
							reason = fmt.Sprintf("‡πÄ‡∏û‡∏¥‡πà‡∏á‡∏ó‡∏≥‡πÑ‡∏õ ‡∏£‡∏≠‡∏≠‡∏µ‡∏Å %v", remain)
						}
					} else {
						if len(pendingQuids) > 0 {
							available = true
							reason = fmt.Sprintf("‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÉ‡∏´‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
						} else {
							available = false
							reason = "‡∏Ñ‡∏£‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÅ‡∏•‡πâ‡∏ß ‡πÅ‡∏ï‡πà‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ"
						}
					}
				} else {
					// ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏Ñ‡∏¢‡∏ó‡∏≥ afterChat ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ ‚Üí ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏£‡∏≠‡∏ö‡πÅ‡∏£‡∏Å‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢
					if len(pendingQuids) > 0 {
						available = true
						reason = fmt.Sprintf("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
					} else {
						available = false
						reason = "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡πÑ‡∏î‡πâ"
					}
				}

			} else {
				// ‡πÑ‡∏°‡πà‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà ‚Üí ‡∏ó‡∏≥‡πÉ‡∏´‡πâ‡∏´‡∏°‡∏î‡πÉ‡∏ô‡∏Ñ‡∏£‡∏≤‡∏ß‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
				if len(pendingQuids) > 0 {
					available = true
					reason = fmt.Sprintf("‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏¢ ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
				} else {
					available = false
					reason = "‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"
				}
			}

		default: // onLogin
			if len(pendingQuids) > 0 {
				available = true
				reason = fmt.Sprintf("‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏≠‡∏µ‡∏Å %d ‡∏â‡∏ö‡∏±‡∏ö", len(pendingQuids))
			} else {
				available = false
				reason = "‡∏ó‡∏≥‡∏Ñ‡∏£‡∏ö‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß"
			}
		}

		// ‡∏™‡πà‡∏á array ‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏ó‡∏ô null (‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢‡πÉ‡∏ô frontend)
		if pendingQuids == nil {
			pendingQuids = []uint{}
		}
		out = append(out, GroupOut{
			ID:            g.ID,
			Name:          g.Name,
			Description:   g.Description,
			FrequencyDays: g.FrequencyDays,
			TriggerType:   g.TriggerType,
			Available:     available,
			Reason:        reason,
			Next:          nextQ,
			PendingQuids:  pendingQuids,
		})
	}

	c.JSON(http.StatusOK, out)
}

//////////////////////////////////////////////////////////////// ADMIN //////////////////////////////////////////////////////////////////////

func GetAllQuestionnaireGroups(c *gin.Context) {
	var groups []entity.QuestionnaireGroup

	// preload ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏°
	if err := config.DB().Preload("Questionnaires").Find(&groups).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ"})
		return
	}

	c.JSON(http.StatusOK, groups)
}

// ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÅ‡∏ö‡∏ö ‚Äú‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° OrderInGroup‚Äù
func GetQuestionnaireGroupByID(c *gin.Context) {
	id := c.Param("id")

	var group entity.QuestionnaireGroup
	// ‡∏î‡∏∂‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° + join table + ‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏° order
	if err := config.DB().
		Preload("QuestionnaireGroupQuestionnaires", func(db *gorm.DB) *gorm.DB {
			return db.Order("order_in_group ASC")
		}).
		Preload("QuestionnaireGroupQuestionnaires.Questionnaire").
		First(&group, id).Error; err != nil {
		util.HandleError(c, http.StatusNotFound, "‡πÑ‡∏°‡πà‡∏û‡∏ö Group", "NOT_FOUND")
		return
	}

	// ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô payload ‡∏ó‡∏µ‡πà frontend ‡πÉ‡∏ä‡πâ‡∏á‡πà‡∏≤‡∏¢
	type Q struct {
		ID             uint   `json:"id"`
		Name           string `json:"name"`
		OrderInGroup   uint   `json:"order_in_group"`
		ConditionOnID  *uint  `json:"condition_on_id"`
		ConditionScore *int   `json:"condition_score"`
	}
	payload := struct {
		ID            uint   `json:"id"`
		Name          string `json:"name"`
		Description   string `json:"description"`
		FrequencyDays *uint  `json:"frequency_days"`
		Items         []Q    `json:"questionnaires"`
	}{
		ID:            group.ID,
		Name:          group.Name,
		Description:   group.Description,
		FrequencyDays: group.FrequencyDays,
	}

	for _, link := range group.QuestionnaireGroupQuestionnaires {
		payload.Items = append(payload.Items, Q{
			ID:             link.Questionnaire.ID,
			Name:           link.Questionnaire.NameQuestionnaire,
			OrderInGroup:   link.OrderInGroup,
			ConditionOnID:  link.Questionnaire.ConditionOnID,
			ConditionScore: link.Questionnaire.ConditionScore,
		})
	}

	c.JSON(http.StatusOK, payload)
}

// ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° (‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô 14 ‡πÄ‡∏õ‡πá‡∏ô 7/21 ‡∏Ø‡∏•‡∏Ø)
type updateFreqReq struct {
	FrequencyDays *uint `json:"frequency_days"` // null = ‡∏ó‡∏≥‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÄ‡∏î‡∏µ‡∏¢‡∏ß
}

func UpdateQuestionnaireGroupFrequency(c *gin.Context) {
	id := c.Param("id")
	var body updateFreqReq

	if err := c.ShouldBindJSON(&body); err != nil {
		util.HandleError(c, http.StatusBadRequest, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_INPUT")
		return
	}

	// ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á description ‡∏ï‡∏≤‡∏° FrequencyDays
	var description string
	if body.FrequencyDays == nil {
		description = "‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á"
	} else {
		description = fmt.Sprintf("‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡πÅ‡∏≠‡∏õ‡∏û‡∏•‡∏¥‡πÄ‡∏Ñ‡∏ä‡∏±‡∏ô‡∏ó‡∏∏‡∏Å‡πÜ %d ‡∏ß‡∏±‡∏ô", *body.FrequencyDays)
	}

	// ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏ó‡∏±‡πâ‡∏á frequency_days ‡πÅ‡∏•‡∏∞ description
	if err := config.DB().Model(&entity.QuestionnaireGroup{}).
		Where("id = ?", id).
		Updates(map[string]interface{}{
			"frequency_days": body.FrequencyDays,
			"description":    description,
		}).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "UPDATE_FAILED")
		return
	}

	c.JSON(http.StatusOK, gin.H{
		"message":     "updated",
		"description": description,
	})
}

// ‡∏à‡∏±‡∏î‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏° (drag & drop ‡πÅ‡∏•‡πâ‡∏ß‡∏™‡πà‡∏á‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô array)
type reorderReq struct {
	QuestionnaireIDs []uint `json:"questionnaire_ids"` // ‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÉ‡∏´‡∏°‡πà‡∏à‡∏≤‡∏Å‡∏ã‡πâ‡∏≤‡∏¢‚Üí‡∏Ç‡∏ß‡∏≤
}

func ReorderQuestionnairesInGroup(c *gin.Context) {
	gid := c.Param("id")

	var body reorderReq
	if err := c.ShouldBindJSON(&body); err != nil || len(body.QuestionnaireIDs) == 0 {
		util.HandleError(c, http.StatusBadRequest, "payload ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_INPUT")
		return
	}

	// loop ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï order_in_group
	for idx, qid := range body.QuestionnaireIDs {
		if err := config.DB().Model(&entity.QuestionnaireGroupQuestionnaire{}).
			Where("questionnaire_group_id = ? AND questionnaire_id = ?", gid, qid).
			Update("order_in_group", idx+1).Error; err != nil {
			util.HandleError(c, http.StatusInternalServerError, "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏•‡∏≥‡∏î‡∏±‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à", "UPDATE_FAILED")
			return
		}
	}
	c.JSON(http.StatusOK, gin.H{"message": "reordered"})
}

// ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
type addQuestionnaireToGroupReq struct {
	QuestionnaireID uint `json:"questionnaire_id"`
}

func AddQuestionnaireToGroup(c *gin.Context) {
	groupID, _ := strconv.Atoi(c.Param("id"))
	var body addQuestionnaireToGroupReq
	if err := c.ShouldBindJSON(&body); err != nil || body.QuestionnaireID == 0 {
		util.HandleError(c, http.StatusBadRequest, "‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á", "INVALID_INPUT")
		return
	}

	// ‡∏ô‡∏±‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡πÑ‡∏´‡∏°
	var count int64
	config.DB().Model(&entity.QuestionnaireGroupQuestionnaire{}).
		Where("questionnaire_group_id = ? AND questionnaire_id = ?", groupID, body.QuestionnaireID).
		Count(&count)
	if count > 0 {
		util.HandleError(c, http.StatusConflict, "‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ô‡∏µ‡πâ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÅ‡∏•‡πâ‡∏ß", "ALREADY_EXISTS")
		return
	}

	// ‡∏´‡∏≤ Order ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤
	var maxOrder uint
	config.DB().Model(&entity.QuestionnaireGroupQuestionnaire{}).
		Where("questionnaire_group_id = ?", groupID).
		Select("COALESCE(MAX(order_in_group), 0)").Scan(&maxOrder)

	link := entity.QuestionnaireGroupQuestionnaire{
		QuestionnaireGroupID: uint(groupID),
		QuestionnaireID:      body.QuestionnaireID,
		OrderInGroup:         maxOrder + 1,
	}

	if err := config.DB().Create(&link).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ", "CREATE_FAILED")
		return
	}

	c.JSON(http.StatusCreated, gin.H{"message": "‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
}

// ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°
func RemoveQuestionnaireFromGroup(c *gin.Context) {
	groupID, _ := strconv.Atoi(c.Param("id"))
	qid, _ := strconv.Atoi(c.Param("qid"))

	if err := config.DB().Where("questionnaire_group_id = ? AND questionnaire_id = ?", groupID, qid).
		Delete(&entity.QuestionnaireGroupQuestionnaire{}).Error; err != nil {
		util.HandleError(c, http.StatusInternalServerError, "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÑ‡∏î‡πâ", "DELETE_FAILED")
		return
	}

	c.JSON(http.StatusOK, gin.H{"message": "‡∏•‡∏ö‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"})
}

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô: ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°
func GetAvailableQuestionnairesForGroup(c *gin.Context) {
	groupID := c.Param("id")

	// ‡∏î‡∏∂‡∏á ID ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ (‡πÄ‡∏ó‡πà‡∏≤‡∏ô‡∏±‡πâ‡∏ô)
	var existingIDs []uint
	config.DB().Model(&entity.QuestionnaireGroupQuestionnaire{}).
		Where("questionnaire_group_id = ?", groupID).
		Pluck("questionnaire_id", &existingIDs)

	// ‡∏î‡∏∂‡∏á‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏ó‡∏µ‡πà "‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏ô‡∏µ‡πâ"
	var list []entity.Questionnaire
	if len(existingIDs) == 0 {
		// ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÅ‡∏ö‡∏ö‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏¢ ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
		config.DB().Find(&list)
	} else {
		config.DB().Where("id NOT IN ?", existingIDs).Find(&list)
	}

	type Out struct {
		ID   uint   `json:"id"`
		Name string `json:"name"`
	}
	var out []Out
	for _, q := range list {
		out = append(out, Out{ID: q.ID, Name: q.NameQuestionnaire})
	}

	c.JSON(http.StatusOK, out)
}
